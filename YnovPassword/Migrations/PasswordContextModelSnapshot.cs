// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using YnovPassword.Modele;

#nullable disable

namespace YnovPassword.Migrations
{
    [DbContext(typeof(PasswordContext))]
    partial class PasswordContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.6");

            modelBuilder.Entity("YnovPassword.Modele.Account", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("TypeProfileId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("URL")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("UtilisateurId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("TypeProfileId");

                    b.HasIndex("UtilisateurId");

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("YnovPassword.Modele.DBUtilisateur", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("INTEGER");

                    b.Property<string>("MotDePasse")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("Prenom")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("DBUtilisateur");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "Robert",
                            IsAdmin = true,
                            MotDePasse = "a854b1b2a415b94f545c9490e86eb92c7da6c643f2afce6b69c672ba0ba3be0c",
                            Nom = "DeMadrido",
                            Prenom = "Roberto"
                        });
                });

            modelBuilder.Entity("YnovPassword.Modele.Dictionnaire", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Mot")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Dictionnaires");

                    b.HasData(
                        new
                        {
                            Id = 2,
                            Mot = "banane"
                        },
                        new
                        {
                            Id = 3,
                            Mot = "cerise"
                        },
                        new
                        {
                            Id = 4,
                            Mot = "datte"
                        },
                        new
                        {
                            Id = 5,
                            Mot = "fraise"
                        },
                        new
                        {
                            Id = 6,
                            Mot = "raisin"
                        },
                        new
                        {
                            Id = 7,
                            Mot = "melon"
                        },
                        new
                        {
                            Id = 8,
                            Mot = "kiwi"
                        },
                        new
                        {
                            Id = 9,
                            Mot = "citron"
                        },
                        new
                        {
                            Id = 10,
                            Mot = "mangue"
                        },
                        new
                        {
                            Id = 11,
                            Mot = "abricot"
                        },
                        new
                        {
                            Id = 12,
                            Mot = "pêche"
                        },
                        new
                        {
                            Id = 13,
                            Mot = "prune"
                        },
                        new
                        {
                            Id = 14,
                            Mot = "poire"
                        },
                        new
                        {
                            Id = 15,
                            Mot = "orange"
                        },
                        new
                        {
                            Id = 16,
                            Mot = "framboise"
                        },
                        new
                        {
                            Id = 17,
                            Mot = "myrtille"
                        },
                        new
                        {
                            Id = 18,
                            Mot = "groseille"
                        },
                        new
                        {
                            Id = 19,
                            Mot = "pastèque"
                        },
                        new
                        {
                            Id = 20,
                            Mot = "pamplemousse"
                        },
                        new
                        {
                            Id = 21,
                            Mot = "noix"
                        },
                        new
                        {
                            Id = 22,
                            Mot = "amande"
                        },
                        new
                        {
                            Id = 23,
                            Mot = "châtaigne"
                        },
                        new
                        {
                            Id = 24,
                            Mot = "figue"
                        },
                        new
                        {
                            Id = 25,
                            Mot = "mûre"
                        });
                });

            modelBuilder.Entity("YnovPassword.Modele.TypeProfile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("TypeProfiles");

                    b.HasData(
                        new
                        {
                            Id = 2,
                            Name = "Amazon"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Google"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Facebook"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Twitter"
                        },
                        new
                        {
                            Id = 6,
                            Name = "LinkedIn"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Microsoft"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Apple"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Spotify"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Adobe"
                        });
                });

            modelBuilder.Entity("YnovPassword.Modele.Account", b =>
                {
                    b.HasOne("YnovPassword.Modele.TypeProfile", "TypeProfile")
                        .WithMany("Accounts")
                        .HasForeignKey("TypeProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("YnovPassword.Modele.DBUtilisateur", "Utilisateur")
                        .WithMany("Accounts")
                        .HasForeignKey("UtilisateurId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TypeProfile");

                    b.Navigation("Utilisateur");
                });

            modelBuilder.Entity("YnovPassword.Modele.DBUtilisateur", b =>
                {
                    b.Navigation("Accounts");
                });

            modelBuilder.Entity("YnovPassword.Modele.TypeProfile", b =>
                {
                    b.Navigation("Accounts");
                });
#pragma warning restore 612, 618
        }
    }
}
